cc = gcc
linker_flags = 
flags =  -O2 -std=c99
cwd = /mnt/c/Users/Lewboski/Desktop/Programming/learn/mate/examples/05-samurai-source-code
builddir = /mnt/c/Users/Lewboski/Desktop/Programming/learn/mate/examples/05-samurai-source-code/build
target = $builddir/samu
includes = 
libs = -lrt

rule link
  command = $cc $flags $linker_flags -o $out $in $libs

rule compile
  command = $cc $flags $includes -c $in -o $out

build $builddir/build.o: compile $cwd/src/build.c
build $builddir/deps.o: compile $cwd/src/deps.c
build $builddir/env.o: compile $cwd/src/env.c
build $builddir/graph.o: compile $cwd/src/graph.c
build $builddir/htab.o: compile $cwd/src/htab.c
build $builddir/log.o: compile $cwd/src/log.c
build $builddir/os-posix.o: compile $cwd/src/os-posix.c
build $builddir/parse.o: compile $cwd/src/parse.c
build $builddir/samu.o: compile $cwd/src/samu.c
build $builddir/scan.o: compile $cwd/src/scan.c
build $builddir/tool.o: compile $cwd/src/tool.c
build $builddir/tree.o: compile $cwd/src/tree.c
build $builddir/util.o: compile $cwd/src/util.c
build $target: link $builddir/build.o $builddir/deps.o $builddir/env.o $builddir/graph.o $builddir/htab.o $builddir/log.o $builddir/os-posix.o $builddir/parse.o $builddir/samu.o $builddir/scan.o $builddir/tool.o $builddir/tree.o $builddir/util.o

default $target
